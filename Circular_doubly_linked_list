//circular doubly linked list

#include<stdio.h>
#include<stdlib.h>

struct node
{
    int data;
    struct node *prev;
    struct node *next;
};

struct node *head=NULL;

void insert(int e)
{
    struct node *t;
    if(head==NULL)
    {
        head=(struct node*)malloc(sizeof(struct node));
        head->data=e;
        head->next=head;
        head->prev=head;
    }
    else
    {
        t=head;
        while(t->next!=head)
        {
            t=t->next;
        }
        t->next=(struct node*)malloc(sizeof(struct node));
        t->next->data=e;
        t->next->next=head;
        t->next->prev=t;
        head->prev=t->next;
    }
}

void display()
{
    struct node *t;
    if(head==NULL)
    {
        printf("CDLL is Empty");
    }
    else
    {
        t=head;
        printf("\n");
        do
        {
            printf("%d\t",t->data);
            t=t->next;
        }while(t!=head);
    }
}

void delete(int e)
{
    struct node *t;
    if(head==NULL)
    {
        printf("CDLL is Empty");
    }
    else if(head->data == e && head->next==head)//first element with one element
    {
        head=NULL;
    }
    else if(head->data==e)//first element but several
    {
        head->prev->next=head->next;
        head->next->prev=head->prev;
        head=head->next;//moving head to 2nd element
    }
    else
    {
        t=head->next;//traversing the list to find
        while(t!=head && t->data!=e)
        {
            t=t->next;
        }
        if(t==head)
        {
            printf("Element not found");
        }
        else//deleting the intermediate node
        {
            t->prev->next=t->next;
            t->next->prev=t->prev;
        }
    }
}

int main()
{
    insert(10);
    insert(20);
    insert(30);
    display();
    delete(20);
    display();
    delete(100);
    display();
    delete(10);
    display();
    return 0;
}
